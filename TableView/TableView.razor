<CollectionsResources/>

@using Cherry.Lib.Core.Disco.ContentViewer
@using Serilog
@using Cherry.Lib.Core.App.Discovery
@using Cherry.Lib.Core.Data.Models
@using Cherry.Lib.Core.Disco.Navigation
@using Cherry.Lib.Core.Icons
@using Cherry.Lib.Core.Meta
@using Microsoft.Extensions.Localization
@using Autofac
@using Blazored.LocalStorage
@using Cherry.Lib.Core.Data.Repositories
@inherits ResourceViewBase<IObjectCollection>

@inject INavigator Navigator
@inject ILogger Logger;
@inject IStringLocalizer<TableView> Localizer;
@inject ILifetimeScope Scope;
@inject ILocalStorageService LocalStorage;

<div class="Collection-Container">
    @if (Summary != null)
    {
        <div class="Flter">
            @foreach (var tag in Summary)
            {
                <div @key="@tag.Tag" class="@(Tag == tag.Tag ? "Flter-Chip Flter-Chip-Active" : "Flter-Chip")" @onclick="() => ToggleFilter(tag.Tag)">
                    <MaterialIcon>apartment</MaterialIcon>
                    <div>@tag.Tag</div>
                    <div class="Div">-</div>
                    <div>@tag.Count</div>
                </div>
            }
        </div>
    }
    <Paper Style="width: 100%; overflow-x: auto;">
        <Table>
            <TableHead>
                <TableRow>
                    @foreach (var accessor in Resource.Accesors)
                    {
                        <TableCell>
                            @CreateSortableColumn(accessor)
                        </TableCell>
                    }
                </TableRow>
            </TableHead>
            <TableBody>
                @if (Fetching)
                {
                    <TableRow>
                        <TableCell colspan="@(Resource.Accesors.Count())" Align="Align.Center">
                            <CircularProgress/>
                        </TableCell>
                    </TableRow>
                }
                else
                {
                    @foreach (var row in Items)
                    {
                        <tr class="TableRow-Root TableRow-Body TableRow-Hover" @onclick="e => RowClicked(row.GetRef())">
                            @foreach (var accessor in Resource.Accesors)
                            {
                                <td class=@($"TableCell-Root TableCell-Body")>@RenderCell(accessor, row)</td>
                            }
                        </tr>
                    }
                }
            </TableBody>
        </Table>
    </Paper>
    <div class="Collection-Actions">
        @if (Resource.CanAdd)
        {
            <Fab
                Color="@Color.Secondary"
                Variant="@FabVariant.Extended"
                OnClick="@CreateNewClicked">
                <AddIcon/>
                Створити
            </Fab>
        }
    </div>
</div>

@code
{
    private bool Fetching = false;
    private string Tag = null;

    private IEnumerable<object> Items = new List<object>();
    private List<SummaryItem> Summary;


    private string SortMessage => "sort " + (Resource.Direction == SortDirection.Desc ? "descending" : "ascending");

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FetchItems();
    }

    private RenderFragment CreateSortableColumn(Accessor accessor)
    {
        return @<TableSortLabel
                    Active="@(Resource.SortedBy == accessor)"
                    Direction="@(Resource.Direction == SortDirection.Asc ? Sort.Ascending : Sort.Descending)"
                    OnClick="@CreateOnSortClick(accessor)">
                   @accessor.Title
                   @if (Resource.SortedBy == accessor)
                   {
                       <span class="object-sort-visually-hidden">
                           @SortMessage
                       </span>
                   }
               </TableSortLabel>;
    }

    private async Task FetchItems()
    {
        Fetching = true;
        StateHasChanged();
        
        Tag = await LocalStorage.GetItemAsync<string>($"Tags.{Resource.ResourcePath}");
        Console.WriteLine("xxxx: {0}", Tag);

        var result = await Resource.FetchItemsWithSummary();
        Summary = result.Summary?.ToList();
        if(Tag != null && Summary!=null && Summary.All(t => t.Tag != Tag))
            Summary.Add(new SummaryItem{Tag = Tag, Count = 0});
        if(Tag == null)
            Items = result.Objects.Cast<object>();
        else
        {
            object? f;
            Scope.TryResolveNamed(Resource.ResourcePath, typeof(IFilter), out f);
            if (f is IFilter filter)
            {
                Items = filter.FilterByTag(result.Objects, Tag).Cast<object>();
            }
        }

        Summary = Summary?.OrderBy(t => t.Tag).ToList();
        
        Fetching = false;
        StateHasChanged();
    }

    private EventCallback<EventArgs> CreateOnSortClick(Accessor accessor)
    {
        return EventCallback.Factory.Create<System.EventArgs>(this, (_) => { HandleSortClick(accessor); });
    }


    private void HandleSortClick(Accessor accessor)
    {
        Resource.SortedBy = accessor;
        Resource.Direction = Resource.Direction == SortDirection.Asc ? SortDirection.Desc : SortDirection.Asc;

        FetchItems();
    }

    private void RowClicked(string objectRef)
    {
        Logger.Information("Row clicked for object {@ref}", objectRef);
        Navigator.NavigateTo(objectRef, true, Resource);
    }
    
    private void CreateNewClicked()
    {
        Logger.Information("CreateNewClicked");
        Navigator.NavigateTo(Objects.NewObjectUri, true, Resource);
    }

    private async void ToggleFilter(string tag)
    {
        if (Tag == tag)
            Tag = null;
        else
            Tag = tag;

        if (Tag == null)
            await LocalStorage.RemoveItemAsync($"Tags.{Resource.ResourcePath}");
        else
            await LocalStorage.SetItemAsync($"Tags.{Resource.ResourcePath}", Tag);

        FetchItems();
    }

    RenderFragment RenderCell(Accessor accessor, object row)
    {
        var value = accessor.Getter(row);
        if (accessor.AccessorType.IsEnum)
        {
            var icon = value.GetEnumMemberAttribute<IconAttribute>()?.Name;
            var title = value.GetEnumMemberAttribute<TitleAttribute>()?.GetLocalisedName(Localizer) ?? value?.ToString();
            var color = value.GetEnumMemberAttribute<ColorAttribute>()?.Color ?? ElementColor.Grey;
            return RenderBadge(icon, color.ToString(), title);
        }
        return RenderString(value?.ToString());
    }

    RenderFragment RenderString(string text) => @<span>@text</span>;
    
    RenderFragment RenderBadge(string icon, string color, string text) => @<div class=@($"Collection-Chip Collection-Chip-{color}") ><MaterialIcon>@icon</MaterialIcon><div>@text</div></div>;
}