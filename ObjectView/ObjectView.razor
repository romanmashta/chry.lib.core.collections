<CollectionsResources/>

@using Cherry.Lib.Core.Disco.ContentViewer
@using Skclusive.Material.Grid
@using Skclusive.Material.Card
@using Skclusive.Material.Input
@using Skclusive.Material.List
@using System.Collections
@using Autofac
@using Cherry.Lib.Bot.Core.Host
@using Cherry.Lib.Bot.Core.Store
@using Cherry.Lib.Core.Disco.ContentViewer
@using Serilog
@using Cherry.Lib.Core.App.Discovery
@using Cherry.Lib.Core.Data.Clients.Contracts
@using Cherry.Lib.Core.Data.Models
@using Cherry.Lib.Core.Data.Repositories.Contracts
@using Cherry.Lib.Core.Disco.Navigation
@using Cherry.Lib.Core.Icons
@using Cherry.Lib.Core.Meta
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@using Skclusive.Material.Modal


@inherits ObjectViewComponent
@inject IStringLocalizer<ObjectView> Localizer
@inject ILifetimeScope Scope;

<ObjectViewStyle/>

<Paper Class="ObjectView-Paper">
    <div
        style="flex-grow: 1;">
        <Grid Container Justify="@Justify.Center">
            <Grid
                Container
                Item
                Large="@GridSize.Eight"
                Spacing="@Spacing.Three">
                @foreach (var accessor in Resource.Accesors)
                {
                    if (accessor.IsCollection == true)
                    {
                        <Grid
                            @key="@accessor"
                            Container
                            Item
                            ExtraSmall="@GridSize.Twelve"
                            Small="@GridSize.Twelve">
                            @foreach (var item in (IEnumerable) accessor.Getter(Resource.TargetObject))
                            {
                                if (item is IAnswer qa)
                                {
                                    if (qa.Value?.StartsWith("https://") == true)
                                    {
                                        continue;
                                    }
                                    <Grid
                                        ExtraSmall="@GridSize.Twelve"
                                        Small="@GridSize.Eight"
                                        Item>
                                        @qa.Name
                                    </Grid>
                                    <Grid
                                        ExtraSmall="@GridSize.Twelve"
                                        Small="@GridSize.Four"
                                        Item>
                                        @qa.Value
                                    </Grid>
                                }
                                /*
                                var itemAccessors = ObjectResource.BuildAccessors(item);
                                @foreach (var itemAccessor in itemAccessors)
                                {
                                    if (@itemAccessor.Getter(item)?.ToString()?.StartsWith("https://") == true)
                                        continue;
                                    <Grid
                                        ExtraSmall="@GridSize.Twelve"
                                        Small="@(itemAccessor.Length != 0 ? ((GridSize) itemAccessor.Length) : GridSize.Twelve)"
                                        Item>
                                        @itemAccessor.Getter(item)
                                    </Grid>
                                }*/
                            }
                        </Grid>
                    }
                    else if (accessor.IsLookup)
                    {
                        <Grid
                            @key="@accessor"
                             Item
                             ExtraSmall="@GridSize.Twelve"
                             Small="@(accessor.Long || accessor.Multiline ? @GridSize.Twelve : @GridSize.Six)">
                            <div @key="@accessor">
                                @{
                                    var ctx = new BindContext {Target = Resource.TargetObject, Accessor = accessor};
                                }
                            </div>

                            <TextField
                                @key="@(accessor.Name)"
                                 FullWidth
                                 Id="@(accessor.Name)"
                                 Label="@(accessor.Title)"
                                 Multiline="@(accessor.Multiline)"
                                 Disabled="@(accessor.ReadOnly)"
                                 Rows="@(accessor.Multiline ? 4 : 1)"
                                 Value="@(accessor.Getter(Resource.TargetObject)?.ToString())"
                                 Class="Lookup-Field"
                                 ReadOnly=true
                                 OnFocus="@(() => HandleLookupOpen(ctx))"
                                 >
                                <EndAdornment>
                                    <InputAdornment
                                        Position="@InputPosition.End"
                                        Context="AdornmentContext">
                                        <IconButton OnClick="@(() => HandleLookupOpen(ctx))">
                                                <ArrowDropDownIcon />
                                        </IconButton>
                                    </InputAdornment>
                                </EndAdornment>                                
                            </TextField>
                        </Grid>                        
                    }                    
                    else if (accessor.IsEnum)
                    {
                        <Grid
                            @key="@accessor"
                            Item
                            ExtraSmall="@GridSize.Twelve"
                            Small="@(GridSize.Twelve)">
                            <FormControl
                                Component="fieldset">
                                <FormLabel Component="legend">
                                    @(accessor.Title)
                                </FormLabel>
                                @{
                                    var ctx = new BindContext {Target = Resource.TargetObject, Accessor = accessor};
                                }
                                <RadioGroup
                                    Row
                                    Value="@(accessor.Getter(Resource.TargetObject)?.ToString())"
                                    OnChange="@(ctx.OnChanged)">
                                    @{
                                        var enumItems = Enum.GetValues(accessor.AccessorType);
                                        foreach (var item in enumItems)
                                        {
                                            if (item.GetEnumMemberAttribute<TitleAttribute>()?.System == true)
                                                continue;

                                            <FormControlLabel
                                                Label="@(item.GetEnumMemberAttribute<TitleAttribute>()?.GetLocalisedName(Localizer) ?? item?.ToString())"
                                                Placement="@Placement.End">
                                                <Radio
                                                    Value="@item.ToString()"
                                                    Color="@Color.Primary"/>
                                            </FormControlLabel>
                                        }
                                    }
                                </RadioGroup>
                            </FormControl>
                        </Grid>
                    }
                    else
                    {
                        <Grid
                            @key="@accessor"
                             Item
                             ExtraSmall="@GridSize.Twelve"
                             Small="@(accessor.Long || accessor.Multiline ? @GridSize.Twelve : @GridSize.Six)">
                            <div @key="@accessor">
                                @{
                                    var ctx = new BindContext {Target = Resource.TargetObject, Accessor = accessor};
                                }
                            </div>

                            <TextField
                                @key="@(accessor.Name)"
                                 FullWidth
                                 Id="@(accessor.Name)"
                                 Label="@(accessor.Title)"
                                 Multiline="@(accessor.Multiline)"
                                 Disabled="@(accessor.ReadOnly)"
                                 Rows="@(accessor.Multiline ? 4 : 1)"
                                 Value="@(accessor.Getter(Resource.TargetObject)?.ToString())"
                                 OnChange="@(ctx.OnChanged)"
                            >
                            </TextField>
                        </Grid>
                    }
                }
                <Grid
                    Item
                    Container
                    ExtraSmall="@GridSize.Twelve"
                    Small="@GridSize.Twelve"
                    Spacing="@Spacing.Three"
                >
                    @foreach (var accessor in Resource.Accesors)
                    {
                        if (accessor.IsCollection == true)
                        {
                            @foreach (var item in (IEnumerable) accessor.Getter(Resource.TargetObject))
                            {
                                if (item is IAnswer qa)
                                {
                                    if (qa.Value?.StartsWith("https://") != true)
                                    {
                                        continue;
                                    }
                                    <Grid
                                        Item
                                        ExtraSmall="@GridSize.Twelve"
                                        Small="@GridSize.Six">
                                        @{
                                            Action open = () => OnOpen(@qa.Value); 
                                        }
                                        <div @onclick="open">
                                            <Card
                                                Style="max-width: 480px;">
                                                <CardActionArea>
                                                    <CardMedia
                                                        Style="min-height: 320px;"
                                                        Image="@qa.Value"/>
                                                    <CardContent>
                                                        <Typography
                                                            Variant="@TypographyVariant.Body2"
                                                            Component="p">
                                                            @qa.Name
                                                        </Typography>
                                                    </CardContent>
                                                </CardActionArea>
                                            </Card>
                                        </div>
                                    </Grid>
                                }
                            }
                        }
                    }
                </Grid>
            </Grid>
        </Grid>
    </div>
    <Dialog
        Open="@Open"
        OnClose="@OnClose">
        <DialogContent>
            <img src="@Url" style="max-width:100%;max-height:100%"/>
        </DialogContent>
        <DialogActions>
            <Button
                OnClick="@OnClose"
                Color="@Color.Primary">
                Close
            </Button>
        </DialogActions>
    </Dialog>    
</Paper>

<div class="ObjectView-Actions">
    <Fab
        Color="@Color.Secondary"
        Variant="@FabVariant.Extended"
        OnClick="@SaveActionClick">
        <CheckIcon/>
        @Localizer["object.save"]
    </Fab>
</div>

    <Dialog
        MaxWidth="MaxWidth.ExtraSmall"
        FullWidth=true
        Scroll="DialogScroll.Paper"
        OnClose="@HandleLookupClose"
        Open="@LookupOpen">
        <DialogTitle Id="simple-dialog-title">@(Lookupontext?.Accessor?.Title)</DialogTitle>
        <DialogContent Style="padding: 8px;" Dividers>
        <List>
            @foreach(var entity in Entities)
            {
                <ListItem
                    @key="@entity"
                     Button
                     OnClick="@((arg) => UpdateLookupSelectedValue(entity))">
                    <ListItemAvatar>
                        <MaterialIcon>@(Lookupontext?.Accessor?.Icon)</MaterialIcon>
                    </ListItemAvatar>
                    <ListItemText
                        Primary="@entity.ToString()" />
                </ListItem>
            }
        </List>
        </DialogContent>        
        <DialogActions
            Style="marging: 0px; padding: 8px;">
            <Button
                OnClick="@HandleLookupClose"
                Color="@Color.Primary">
                @Localizer["object.close"]
            </Button>
        </DialogActions>        
    </Dialog>

@code {
    private INamedEntity[] Entities = new INamedEntity[]{};
    private BindContext Lookupontext;

    private bool LookupOpen { set; get; }
    
    private bool Open { set; get; }
    
    private string Url { get; set; }
    
    private async void HandleLookupOpen(BindContext bindContext)
    {
        Lookupontext = bindContext;
        Entities = new INamedEntity[] {};
        LookupOpen = true;

        var type = bindContext.Accessor.AccessorType;
        var resource = bindContext.Accessor.CollectionName;
        
        var repository = Scope.Resolve(typeof(IRepositoryClient<>).MakeGenericType(type)) as IRepository;
        var items = await repository.GetEntities(resource, resource) as CollectionResult;
        Entities = items.Objects.Cast<INamedEntity>().OrderBy(e => e.Name).ToArray();

        StateHasChanged();
    }

    private void HandleLookupClose()
    {
        LookupOpen = false;

        StateHasChanged();
    }

    private void UpdateLookupSelectedValue(INamedEntity entity)
    {
        Lookupontext.SetValue(entity);
        LookupOpen = false;

        StateHasChanged();
    }    
    
    private void OnClose()
    {
        Open = false;

        StateHasChanged();
    }

    private void OnOpen(string url)
    {
        Url = url;
        Open = true;

        StateHasChanged();
    }
    
    public class BindContext
    {
        public Accessor Accessor { get; set; }
        public Object Target { get; set; }

        public void OnChanged(ChangeEventArgs args)
        {
            SetValue(args.Value);
        }

        public void SetValue(object value)
        {
            Accessor.Setter(Target, value);
        }
    }

}